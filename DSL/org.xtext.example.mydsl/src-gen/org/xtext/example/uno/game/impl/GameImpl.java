/**
 * generated by Xtext 2.23.0
 */
package org.xtext.example.uno.game.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.example.uno.game.Draw;
import org.xtext.example.uno.game.Game;
import org.xtext.example.uno.game.GamePackage;
import org.xtext.example.uno.game.PlayingSameCards;
import org.xtext.example.uno.game.RotatingCards;
import org.xtext.example.uno.game.Time;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Game</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.example.uno.game.impl.GameImpl#getTwoPlayers <em>Two Players</em>}</li>
 *   <li>{@link org.xtext.example.uno.game.impl.GameImpl#getTime <em>Time</em>}</li>
 *   <li>{@link org.xtext.example.uno.game.impl.GameImpl#getRotatingCards <em>Rotating Cards</em>}</li>
 *   <li>{@link org.xtext.example.uno.game.impl.GameImpl#getPlayingSameCards <em>Playing Same Cards</em>}</li>
 *   <li>{@link org.xtext.example.uno.game.impl.GameImpl#getDraw <em>Draw</em>}</li>
 * </ul>
 *
 * @generated
 */
public class GameImpl extends MinimalEObjectImpl.Container implements Game
{
  /**
   * The default value of the '{@link #getTwoPlayers() <em>Two Players</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTwoPlayers()
   * @generated
   * @ordered
   */
  protected static final String TWO_PLAYERS_EDEFAULT = null;

  /**
   * The cached value of the '{@link #getTwoPlayers() <em>Two Players</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTwoPlayers()
   * @generated
   * @ordered
   */
  protected String twoPlayers = TWO_PLAYERS_EDEFAULT;

  /**
   * The cached value of the '{@link #getTime() <em>Time</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getTime()
   * @generated
   * @ordered
   */
  protected Time time;

  /**
   * The cached value of the '{@link #getRotatingCards() <em>Rotating Cards</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getRotatingCards()
   * @generated
   * @ordered
   */
  protected RotatingCards rotatingCards;

  /**
   * The cached value of the '{@link #getPlayingSameCards() <em>Playing Same Cards</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPlayingSameCards()
   * @generated
   * @ordered
   */
  protected PlayingSameCards playingSameCards;

  /**
   * The cached value of the '{@link #getDraw() <em>Draw</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDraw()
   * @generated
   * @ordered
   */
  protected Draw draw;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected GameImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return GamePackage.Literals.GAME;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String getTwoPlayers()
  {
    return twoPlayers;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTwoPlayers(String newTwoPlayers)
  {
    String oldTwoPlayers = twoPlayers;
    twoPlayers = newTwoPlayers;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.GAME__TWO_PLAYERS, oldTwoPlayers, twoPlayers));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Time getTime()
  {
    return time;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetTime(Time newTime, NotificationChain msgs)
  {
    Time oldTime = time;
    time = newTime;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.GAME__TIME, oldTime, newTime);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setTime(Time newTime)
  {
    if (newTime != time)
    {
      NotificationChain msgs = null;
      if (time != null)
        msgs = ((InternalEObject)time).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.GAME__TIME, null, msgs);
      if (newTime != null)
        msgs = ((InternalEObject)newTime).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.GAME__TIME, null, msgs);
      msgs = basicSetTime(newTime, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.GAME__TIME, newTime, newTime));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public RotatingCards getRotatingCards()
  {
    return rotatingCards;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetRotatingCards(RotatingCards newRotatingCards, NotificationChain msgs)
  {
    RotatingCards oldRotatingCards = rotatingCards;
    rotatingCards = newRotatingCards;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.GAME__ROTATING_CARDS, oldRotatingCards, newRotatingCards);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setRotatingCards(RotatingCards newRotatingCards)
  {
    if (newRotatingCards != rotatingCards)
    {
      NotificationChain msgs = null;
      if (rotatingCards != null)
        msgs = ((InternalEObject)rotatingCards).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.GAME__ROTATING_CARDS, null, msgs);
      if (newRotatingCards != null)
        msgs = ((InternalEObject)newRotatingCards).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.GAME__ROTATING_CARDS, null, msgs);
      msgs = basicSetRotatingCards(newRotatingCards, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.GAME__ROTATING_CARDS, newRotatingCards, newRotatingCards));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PlayingSameCards getPlayingSameCards()
  {
    return playingSameCards;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetPlayingSameCards(PlayingSameCards newPlayingSameCards, NotificationChain msgs)
  {
    PlayingSameCards oldPlayingSameCards = playingSameCards;
    playingSameCards = newPlayingSameCards;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.GAME__PLAYING_SAME_CARDS, oldPlayingSameCards, newPlayingSameCards);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPlayingSameCards(PlayingSameCards newPlayingSameCards)
  {
    if (newPlayingSameCards != playingSameCards)
    {
      NotificationChain msgs = null;
      if (playingSameCards != null)
        msgs = ((InternalEObject)playingSameCards).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.GAME__PLAYING_SAME_CARDS, null, msgs);
      if (newPlayingSameCards != null)
        msgs = ((InternalEObject)newPlayingSameCards).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.GAME__PLAYING_SAME_CARDS, null, msgs);
      msgs = basicSetPlayingSameCards(newPlayingSameCards, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.GAME__PLAYING_SAME_CARDS, newPlayingSameCards, newPlayingSameCards));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Draw getDraw()
  {
    return draw;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetDraw(Draw newDraw, NotificationChain msgs)
  {
    Draw oldDraw = draw;
    draw = newDraw;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, GamePackage.GAME__DRAW, oldDraw, newDraw);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDraw(Draw newDraw)
  {
    if (newDraw != draw)
    {
      NotificationChain msgs = null;
      if (draw != null)
        msgs = ((InternalEObject)draw).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - GamePackage.GAME__DRAW, null, msgs);
      if (newDraw != null)
        msgs = ((InternalEObject)newDraw).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - GamePackage.GAME__DRAW, null, msgs);
      msgs = basicSetDraw(newDraw, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, GamePackage.GAME__DRAW, newDraw, newDraw));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case GamePackage.GAME__TIME:
        return basicSetTime(null, msgs);
      case GamePackage.GAME__ROTATING_CARDS:
        return basicSetRotatingCards(null, msgs);
      case GamePackage.GAME__PLAYING_SAME_CARDS:
        return basicSetPlayingSameCards(null, msgs);
      case GamePackage.GAME__DRAW:
        return basicSetDraw(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case GamePackage.GAME__TWO_PLAYERS:
        return getTwoPlayers();
      case GamePackage.GAME__TIME:
        return getTime();
      case GamePackage.GAME__ROTATING_CARDS:
        return getRotatingCards();
      case GamePackage.GAME__PLAYING_SAME_CARDS:
        return getPlayingSameCards();
      case GamePackage.GAME__DRAW:
        return getDraw();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case GamePackage.GAME__TWO_PLAYERS:
        setTwoPlayers((String)newValue);
        return;
      case GamePackage.GAME__TIME:
        setTime((Time)newValue);
        return;
      case GamePackage.GAME__ROTATING_CARDS:
        setRotatingCards((RotatingCards)newValue);
        return;
      case GamePackage.GAME__PLAYING_SAME_CARDS:
        setPlayingSameCards((PlayingSameCards)newValue);
        return;
      case GamePackage.GAME__DRAW:
        setDraw((Draw)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.GAME__TWO_PLAYERS:
        setTwoPlayers(TWO_PLAYERS_EDEFAULT);
        return;
      case GamePackage.GAME__TIME:
        setTime((Time)null);
        return;
      case GamePackage.GAME__ROTATING_CARDS:
        setRotatingCards((RotatingCards)null);
        return;
      case GamePackage.GAME__PLAYING_SAME_CARDS:
        setPlayingSameCards((PlayingSameCards)null);
        return;
      case GamePackage.GAME__DRAW:
        setDraw((Draw)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case GamePackage.GAME__TWO_PLAYERS:
        return TWO_PLAYERS_EDEFAULT == null ? twoPlayers != null : !TWO_PLAYERS_EDEFAULT.equals(twoPlayers);
      case GamePackage.GAME__TIME:
        return time != null;
      case GamePackage.GAME__ROTATING_CARDS:
        return rotatingCards != null;
      case GamePackage.GAME__PLAYING_SAME_CARDS:
        return playingSameCards != null;
      case GamePackage.GAME__DRAW:
        return draw != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (twoPlayers: ");
    result.append(twoPlayers);
    result.append(')');
    return result.toString();
  }

} //GameImpl
