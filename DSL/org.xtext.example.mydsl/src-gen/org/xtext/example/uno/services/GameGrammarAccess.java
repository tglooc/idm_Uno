/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.uno.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.UnorderedGroup;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class GameGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class GameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.uno.Game.Game");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGameKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cTwoPlayersAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cTwoPlayersTwoPlayersKeyword_2_0_0 = (Keyword)cTwoPlayersAssignment_2_0.eContents().get(0);
		private final Assignment cTimeAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final RuleCall cTimeTimeParserRuleCall_2_1_0 = (RuleCall)cTimeAssignment_2_1.eContents().get(0);
		private final Assignment cRotatingCardsAssignment_2_2 = (Assignment)cUnorderedGroup_2.eContents().get(2);
		private final RuleCall cRotatingCardsRotatingCardsParserRuleCall_2_2_0 = (RuleCall)cRotatingCardsAssignment_2_2.eContents().get(0);
		private final Assignment cPlayingSameCardsAssignment_2_3 = (Assignment)cUnorderedGroup_2.eContents().get(3);
		private final RuleCall cPlayingSameCardsPlayingSameCardsParserRuleCall_2_3_0 = (RuleCall)cPlayingSameCardsAssignment_2_3.eContents().get(0);
		private final Assignment cDrawAssignment_2_4 = (Assignment)cUnorderedGroup_2.eContents().get(4);
		private final RuleCall cDrawDrawParserRuleCall_2_4_0 = (RuleCall)cDrawAssignment_2_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Game:
		//	'Game' '{' (twoPlayers='twoPlayers'? & time=Time & rotatingCards=RotatingCards? & playingSameCards=PlayingSameCards? &
		//	draw=Draw) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'Game' '{' (twoPlayers='twoPlayers'? & time=Time & rotatingCards=RotatingCards? & playingSameCards=PlayingSameCards? &
		//draw=Draw) '}'
		public Group getGroup() { return cGroup; }
		
		//'Game'
		public Keyword getGameKeyword_0() { return cGameKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(twoPlayers='twoPlayers'? & time=Time & rotatingCards=RotatingCards? & playingSameCards=PlayingSameCards? & draw=Draw)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//twoPlayers='twoPlayers'?
		public Assignment getTwoPlayersAssignment_2_0() { return cTwoPlayersAssignment_2_0; }
		
		//'twoPlayers'
		public Keyword getTwoPlayersTwoPlayersKeyword_2_0_0() { return cTwoPlayersTwoPlayersKeyword_2_0_0; }
		
		//time=Time
		public Assignment getTimeAssignment_2_1() { return cTimeAssignment_2_1; }
		
		//Time
		public RuleCall getTimeTimeParserRuleCall_2_1_0() { return cTimeTimeParserRuleCall_2_1_0; }
		
		//rotatingCards=RotatingCards?
		public Assignment getRotatingCardsAssignment_2_2() { return cRotatingCardsAssignment_2_2; }
		
		//RotatingCards
		public RuleCall getRotatingCardsRotatingCardsParserRuleCall_2_2_0() { return cRotatingCardsRotatingCardsParserRuleCall_2_2_0; }
		
		//playingSameCards=PlayingSameCards?
		public Assignment getPlayingSameCardsAssignment_2_3() { return cPlayingSameCardsAssignment_2_3; }
		
		//PlayingSameCards
		public RuleCall getPlayingSameCardsPlayingSameCardsParserRuleCall_2_3_0() { return cPlayingSameCardsPlayingSameCardsParserRuleCall_2_3_0; }
		
		//draw=Draw
		public Assignment getDrawAssignment_2_4() { return cDrawAssignment_2_4; }
		
		//Draw
		public RuleCall getDrawDrawParserRuleCall_2_4_0() { return cDrawDrawParserRuleCall_2_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class TimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.uno.Game.Time");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cLimitedAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cLimitedLimitedKeyword_2_0_0 = (Keyword)cLimitedAssignment_2_0.eContents().get(0);
		private final Assignment cUnlimitedAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cUnlimitedUnlimitedKeyword_2_1_0 = (Keyword)cUnlimitedAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Time:
		//	'time' '{' (limited='limited' | unlimited='unlimited') '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'time' '{' (limited='limited' | unlimited='unlimited') '}'
		public Group getGroup() { return cGroup; }
		
		//'time'
		public Keyword getTimeKeyword_0() { return cTimeKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(limited='limited' | unlimited='unlimited')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//limited='limited'
		public Assignment getLimitedAssignment_2_0() { return cLimitedAssignment_2_0; }
		
		//'limited'
		public Keyword getLimitedLimitedKeyword_2_0_0() { return cLimitedLimitedKeyword_2_0_0; }
		
		//unlimited='unlimited'
		public Assignment getUnlimitedAssignment_2_1() { return cUnlimitedAssignment_2_1; }
		
		//'unlimited'
		public Keyword getUnlimitedUnlimitedKeyword_2_1_0() { return cUnlimitedUnlimitedKeyword_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class RotatingCardsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.uno.Game.RotatingCards");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cRotatingCardsAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cRotatingCardsKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final UnorderedGroup cUnorderedGroup_3 = (UnorderedGroup)cGroup.eContents().get(3);
		private final Assignment cRotatingZeroAssignment_3_0 = (Assignment)cUnorderedGroup_3.eContents().get(0);
		private final Keyword cRotatingZeroRotatingZeroKeyword_3_0_0 = (Keyword)cRotatingZeroAssignment_3_0.eContents().get(0);
		private final Assignment cRotatingSevenAssignment_3_1 = (Assignment)cUnorderedGroup_3.eContents().get(1);
		private final Keyword cRotatingSevenRotatingSevenKeyword_3_1_0 = (Keyword)cRotatingSevenAssignment_3_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//RotatingCards:
		//	{RotatingCards} 'rotatingCards' '{' (rotatingZero='rotatingZero'? & rotatingSeven='rotatingSeven'?) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//{RotatingCards} 'rotatingCards' '{' (rotatingZero='rotatingZero'? & rotatingSeven='rotatingSeven'?) '}'
		public Group getGroup() { return cGroup; }
		
		//{RotatingCards}
		public Action getRotatingCardsAction_0() { return cRotatingCardsAction_0; }
		
		//'rotatingCards'
		public Keyword getRotatingCardsKeyword_1() { return cRotatingCardsKeyword_1; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(rotatingZero='rotatingZero'? & rotatingSeven='rotatingSeven'?)
		public UnorderedGroup getUnorderedGroup_3() { return cUnorderedGroup_3; }
		
		//rotatingZero='rotatingZero'?
		public Assignment getRotatingZeroAssignment_3_0() { return cRotatingZeroAssignment_3_0; }
		
		//'rotatingZero'
		public Keyword getRotatingZeroRotatingZeroKeyword_3_0_0() { return cRotatingZeroRotatingZeroKeyword_3_0_0; }
		
		//rotatingSeven='rotatingSeven'?
		public Assignment getRotatingSevenAssignment_3_1() { return cRotatingSevenAssignment_3_1; }
		
		//'rotatingSeven'
		public Keyword getRotatingSevenRotatingSevenKeyword_3_1_0() { return cRotatingSevenRotatingSevenKeyword_3_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class PlayingSameCardsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.uno.Game.PlayingSameCards");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPlayingSameCardsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final UnorderedGroup cUnorderedGroup_2 = (UnorderedGroup)cGroup.eContents().get(2);
		private final Assignment cSameNumberAssignment_2_0 = (Assignment)cUnorderedGroup_2.eContents().get(0);
		private final Keyword cSameNumberSameNumberKeyword_2_0_0 = (Keyword)cSameNumberAssignment_2_0.eContents().get(0);
		private final Assignment cSameColorAssignment_2_1 = (Assignment)cUnorderedGroup_2.eContents().get(1);
		private final Keyword cSameColorSameColorKeyword_2_1_0 = (Keyword)cSameColorAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//PlayingSameCards:
		//	'playingSameCards' '{' (sameNumber='sameNumber' & sameColor='sameColor'?) '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'playingSameCards' '{' (sameNumber='sameNumber' & sameColor='sameColor'?) '}'
		public Group getGroup() { return cGroup; }
		
		//'playingSameCards'
		public Keyword getPlayingSameCardsKeyword_0() { return cPlayingSameCardsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(sameNumber='sameNumber' & sameColor='sameColor'?)
		public UnorderedGroup getUnorderedGroup_2() { return cUnorderedGroup_2; }
		
		//sameNumber='sameNumber'
		public Assignment getSameNumberAssignment_2_0() { return cSameNumberAssignment_2_0; }
		
		//'sameNumber'
		public Keyword getSameNumberSameNumberKeyword_2_0_0() { return cSameNumberSameNumberKeyword_2_0_0; }
		
		//sameColor='sameColor'?
		public Assignment getSameColorAssignment_2_1() { return cSameColorAssignment_2_1; }
		
		//'sameColor'
		public Keyword getSameColorSameColorKeyword_2_1_0() { return cSameColorSameColorKeyword_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class DrawElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.example.uno.Game.Draw");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDrawKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cOneCardAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final Keyword cOneCardOneCardKeyword_2_0_0 = (Keyword)cOneCardAssignment_2_0.eContents().get(0);
		private final Assignment cThreeCardsAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final Keyword cThreeCardsThreeCardsKeyword_2_1_0 = (Keyword)cThreeCardsAssignment_2_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Draw:
		//	'draw' '{' (oneCard='oneCard' | threeCards='threeCards') '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'draw' '{' (oneCard='oneCard' | threeCards='threeCards') '}'
		public Group getGroup() { return cGroup; }
		
		//'draw'
		public Keyword getDrawKeyword_0() { return cDrawKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//(oneCard='oneCard' | threeCards='threeCards')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//oneCard='oneCard'
		public Assignment getOneCardAssignment_2_0() { return cOneCardAssignment_2_0; }
		
		//'oneCard'
		public Keyword getOneCardOneCardKeyword_2_0_0() { return cOneCardOneCardKeyword_2_0_0; }
		
		//threeCards='threeCards'
		public Assignment getThreeCardsAssignment_2_1() { return cThreeCardsAssignment_2_1; }
		
		//'threeCards'
		public Keyword getThreeCardsThreeCardsKeyword_2_1_0() { return cThreeCardsThreeCardsKeyword_2_1_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	
	
	private final GameElements pGame;
	private final TimeElements pTime;
	private final RotatingCardsElements pRotatingCards;
	private final PlayingSameCardsElements pPlayingSameCards;
	private final DrawElements pDraw;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public GameGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pGame = new GameElements();
		this.pTime = new TimeElements();
		this.pRotatingCards = new RotatingCardsElements();
		this.pPlayingSameCards = new PlayingSameCardsElements();
		this.pDraw = new DrawElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.example.uno.Game".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Game:
	//	'Game' '{' (twoPlayers='twoPlayers'? & time=Time & rotatingCards=RotatingCards? & playingSameCards=PlayingSameCards? &
	//	draw=Draw) '}';
	public GameElements getGameAccess() {
		return pGame;
	}
	
	public ParserRule getGameRule() {
		return getGameAccess().getRule();
	}
	
	//Time:
	//	'time' '{' (limited='limited' | unlimited='unlimited') '}';
	public TimeElements getTimeAccess() {
		return pTime;
	}
	
	public ParserRule getTimeRule() {
		return getTimeAccess().getRule();
	}
	
	//RotatingCards:
	//	{RotatingCards} 'rotatingCards' '{' (rotatingZero='rotatingZero'? & rotatingSeven='rotatingSeven'?) '}';
	public RotatingCardsElements getRotatingCardsAccess() {
		return pRotatingCards;
	}
	
	public ParserRule getRotatingCardsRule() {
		return getRotatingCardsAccess().getRule();
	}
	
	//PlayingSameCards:
	//	'playingSameCards' '{' (sameNumber='sameNumber' & sameColor='sameColor'?) '}';
	public PlayingSameCardsElements getPlayingSameCardsAccess() {
		return pPlayingSameCards;
	}
	
	public ParserRule getPlayingSameCardsRule() {
		return getPlayingSameCardsAccess().getRule();
	}
	
	//Draw:
	//	'draw' '{' (oneCard='oneCard' | threeCards='threeCards') '}';
	public DrawElements getDrawAccess() {
		return pDraw;
	}
	
	public ParserRule getDrawRule() {
		return getDrawAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
