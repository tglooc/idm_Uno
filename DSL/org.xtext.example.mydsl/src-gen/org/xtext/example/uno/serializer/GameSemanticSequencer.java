/*
 * generated by Xtext 2.23.0
 */
package org.xtext.example.uno.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.xtext.example.uno.game.Draw;
import org.xtext.example.uno.game.Game;
import org.xtext.example.uno.game.GamePackage;
import org.xtext.example.uno.game.PlayingSameCards;
import org.xtext.example.uno.game.RotatingCards;
import org.xtext.example.uno.game.Time;
import org.xtext.example.uno.services.GameGrammarAccess;

@SuppressWarnings("all")
public class GameSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private GameGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == GamePackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case GamePackage.DRAW:
				sequence_Draw(context, (Draw) semanticObject); 
				return; 
			case GamePackage.GAME:
				sequence_Game(context, (Game) semanticObject); 
				return; 
			case GamePackage.PLAYING_SAME_CARDS:
				sequence_PlayingSameCards(context, (PlayingSameCards) semanticObject); 
				return; 
			case GamePackage.ROTATING_CARDS:
				sequence_RotatingCards(context, (RotatingCards) semanticObject); 
				return; 
			case GamePackage.TIME:
				sequence_Time(context, (Time) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Draw returns Draw
	 *
	 * Constraint:
	 *     (oneCard='oneCard' | threeCards='threeCards')
	 */
	protected void sequence_Draw(ISerializationContext context, Draw semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Game returns Game
	 *
	 * Constraint:
	 *     (twoPlayers='twoPlayers' | time=Time | rotatingCards=RotatingCards | playingSameCards=PlayingSameCards | draw=Draw)+
	 */
	protected void sequence_Game(ISerializationContext context, Game semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     PlayingSameCards returns PlayingSameCards
	 *
	 * Constraint:
	 *     (sameNumber='sameNumber' | sameColor='sameColor')+
	 */
	protected void sequence_PlayingSameCards(ISerializationContext context, PlayingSameCards semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RotatingCards returns RotatingCards
	 *
	 * Constraint:
	 *     (rotatingZero='rotatingZero' | rotatingSeven='rotatingSeven')*
	 */
	protected void sequence_RotatingCards(ISerializationContext context, RotatingCards semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Time returns Time
	 *
	 * Constraint:
	 *     (limited='limited' | unlimited='unlimited')
	 */
	protected void sequence_Time(ISerializationContext context, Time semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
